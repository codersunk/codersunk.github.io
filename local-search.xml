<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PAT乙级1002 写出这个数</title>
    <link href="/2021/04/25/C%E8%89%B9%20PAT%20%E4%B9%99%E7%BA%A7%EF%BC%881002.%E8%AF%BB%E5%85%A5%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B4%E6%95%B0%20n%EF%BC%8C%E8%AE%A1%E7%AE%97%E5%85%B6%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C%EF%BC%8C%E7%94%A8%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3%E5%86%99%E5%87%BA%E5%92%8C%E7%9A%84%E6%AF%8F%E4%B8%80%E4%BD%8D%E6%95%B0%E5%AD%97%E3%80%82%EF%BC%89/"/>
    <url>/2021/04/25/C%E8%89%B9%20PAT%20%E4%B9%99%E7%BA%A7%EF%BC%881002.%E8%AF%BB%E5%85%A5%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B4%E6%95%B0%20n%EF%BC%8C%E8%AE%A1%E7%AE%97%E5%85%B6%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C%EF%BC%8C%E7%94%A8%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3%E5%86%99%E5%87%BA%E5%92%8C%E7%9A%84%E6%AF%8F%E4%B8%80%E4%BD%8D%E6%95%B0%E5%AD%97%E3%80%82%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10^100。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">1234567890987654321123456789<br></code></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yi <span class="hljs-keyword">san</span> <span class="hljs-keyword">wu</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先看一下题面，题目要求的测试用例范围是在10^100以内，这个数据显然远远超过了int型和long型的范围。所以尝试用string型去存这个数。然后思路是计算各位和，再将计算得到的和利用to_string转为string型，然后按位来输出。这里面有几个需要注意的地方。第一个需要注意的地方是使用string[i]取出的对象在借助<code>typeid.name()</code>函数查看后发现类型为char型，而并非int型。所以测试后发现在求和过程中发现得到的结果不正确，实际在求和过程中的数据应该是string[i]-‘0’。第二个需要注意的地方就是题目要求的“拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。”</p><h2 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>cin &gt;&gt; str;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;str.<span class="hljs-built_in">length</span>(); i++)<br>&#123;<br>a += str[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>string str1 = <span class="hljs-built_in">to_string</span>(a);<br><span class="hljs-keyword">int</span> x = str1.<span class="hljs-built_in">length</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x<span class="hljs-number">-1</span>; i++)<br>&#123;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (str1[i] - <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:cout &lt;&lt; <span class="hljs-string">&quot;yi &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:cout &lt;&lt; <span class="hljs-string">&quot;er &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:cout &lt;&lt; <span class="hljs-string">&quot;san &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:cout &lt;&lt; <span class="hljs-string">&quot;si &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:cout &lt;&lt; <span class="hljs-string">&quot;wu &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:cout &lt;&lt; <span class="hljs-string">&quot;liu &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:cout &lt;&lt; <span class="hljs-string">&quot;qi &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:cout &lt;&lt; <span class="hljs-string">&quot;ba &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:cout &lt;&lt; <span class="hljs-string">&quot;jiu &quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:cout &lt;&lt; <span class="hljs-string">&quot;ling &quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (str1[x<span class="hljs-number">-1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:cout &lt;&lt; <span class="hljs-string">&quot;yi&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:cout &lt;&lt; <span class="hljs-string">&quot;er&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:cout &lt;&lt; <span class="hljs-string">&quot;san&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:cout &lt;&lt; <span class="hljs-string">&quot;si&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:cout &lt;&lt; <span class="hljs-string">&quot;wu&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:cout &lt;&lt; <span class="hljs-string">&quot;liu&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:cout &lt;&lt; <span class="hljs-string">&quot;qi&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:cout &lt;&lt; <span class="hljs-string">&quot;ba&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:cout &lt;&lt; <span class="hljs-string">&quot;jiu&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:cout &lt;&lt; <span class="hljs-string">&quot;ling&quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>长时间缺少oj的练习明显感觉到编码能力的下降，趁着今天给自己放个假顺便码两道PAT的basic题，毕竟机试成绩需要长期积累才能有所提高。（其实只是给自己摸鱼不想学数学找借口）明天请务必好好复习！</p>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT乙级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode每日一题No.61旋转链表</title>
    <link href="/2021/03/27/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/03/27/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。<br>示例1：<br><img src="/img/leetcode1.jpg"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">2</span><br>输出：<span class="hljs-string">[4,5,1,2,3]</span><br></code></pre></td></tr></table></figure><p>示例2：<br><img src="/img/leetcode2.jpg"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[0,1,2]</span>, k = 4<br>输出：<span class="hljs-comment">[2,0,1]</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>链表中节点的数目在范围 [0, 500] 内</li><li>-100 &lt;= Node.val &lt;= 100</li><li>0 &lt;= k &lt;= 2 * 109<h2 id="「快慢指针」解法"><a href="#「快慢指针」解法" class="headerlink" title="「快慢指针」解法"></a>「快慢指针」解法</h2>思路：分步骤处理</li><li>避免没有必要的旋转：与链表长度成<strong>整数倍</strong>的旋转都是没有意义的，即旋转前后链表不变</li><li>借助快慢指针的思路找到倒数第k个节点（<strong>新头结点</strong>），然后完成基本的链接和断开操作<br>code：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">rotateRight</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span> || k == <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-comment">// 计算有效的 k 值：对于与链表长度成整数倍的「旋转」都是没有意义的（旋转前后链表不变）</span><br>        <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">auto</span> tmp = head;<br>        <span class="hljs-keyword">while</span> (tmp != <span class="hljs-literal">nullptr</span> &amp;&amp; ++tot &gt; <span class="hljs-number">0</span>) <br>        tmp = tmp-&gt;next;<br>        k %= tot;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span> head;<br><br>        <span class="hljs-comment">// 使用「快慢指针」找到倒数第 k 个节点（新头结点）：slow 会停在「新头结点」的「前一位」，也就是「新尾结点」</span><br>        <span class="hljs-keyword">auto</span> slow = head, fast = head;<br>        <span class="hljs-keyword">while</span> (k-- &gt; <span class="hljs-number">0</span>) <br>        fast = fast-&gt;next;<br>        <span class="hljs-keyword">while</span> (fast-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            slow = slow-&gt;next;<br>            fast = fast-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">// 保存新头结点，并将新尾结点的 next 指针置空</span><br>        <span class="hljs-keyword">auto</span> nHead = slow-&gt;next;<br>        slow-&gt;next = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-comment">// 将新链表的前半部分（原链表的后半部分）与原链表的头结点链接上</span><br>        fast-&gt;next = head;<br>        <span class="hljs-keyword">return</span> nHead;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>时间复杂度O(n)</li><li>空间复杂度O(1)<h2 id="「闭合成环」解法"><a href="#「闭合成环」解法" class="headerlink" title="「闭合成环」解法"></a>「闭合成环」解法</h2>思路：先成环，后断开</li><li>找到链表的最后一个节点，将其与原链表的头结点相连（<strong>成环</strong>），统计链表长度，更新新的k值</li><li>从原链表头结点出发，找到需要断开的节点断开<br>code：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">rotateRight</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-comment">// 先将链表成环，并记录链表的长度</span><br>        <span class="hljs-comment">// tmp会记录链表的最后一个节点</span><br>        <span class="hljs-keyword">int</span> tot = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">auto</span> tmp = head;<br>        <span class="hljs-keyword">while</span>(tmp-&gt;next &amp;&amp; ++ tot) tmp = tmp-&gt;next;<br>        <span class="hljs-comment">// 正式成环</span><br>        tmp-&gt;next = head;<br>        <span class="hljs-comment">// 找到破环的位置的前一个节点</span><br>        k = tot - (k % tot) - <span class="hljs-number">1</span>;<br>        tmp = head;<br>        <span class="hljs-keyword">while</span>(k -- ) tmp = tmp-&gt;next;<br>        <span class="hljs-comment">// 破环, 并记录新的头节点</span><br>        <span class="hljs-keyword">auto</span> nHead = tmp-&gt;next;<br>        tmp-&gt;next = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">return</span> nHead;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>时间复杂度O(n)</li><li>空间复杂度O(1)</li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo+githubpages搭建独立博客</title>
    <link href="/2021/03/27/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/03/27/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>最近看到某大神在面试时向hr展示自己的个人博客，感到甚是佩服，不仅在于他能动手搭博客的能力，更在于他长年累月的记录。把自己不熟悉的花了很长时间才弄懂的问题用博客的形式记录下来，一是加深自己的印象，二是能够经常翻阅。“最适合学习的时候是一年前，其次是现在。”所以本人也趁着近日无事，花了半日时间鼓捣了一下我的个人博客</p><h2 id="关于Hexo的使用"><a href="#关于Hexo的使用" class="headerlink" title="关于Hexo的使用"></a>关于Hexo的使用</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>本文是基于windows系统下的搭建过程，所以你需要准备<br>系统: windows10<br>nodejs：<a href="http://nodejs.cn/download/">下载</a><br>git: <a href="https://git-scm.com/download/">下载</a></p><h3 id="安装hexo的运行环境"><a href="#安装hexo的运行环境" class="headerlink" title="安装hexo的运行环境"></a>安装hexo的运行环境</h3><p>把下载的git和hexo正常安装就好了</p><p>git安装完成后的检查操作，打开cmd，输入命令<code>git</code>显示如图即为正常安装<br><img src="/img/git.jpg"></p><h3 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h3><p>首先为了给你的博客寻找一个合适的位置，你需要新建一个文件夹来存放你的博客的相关内容。然后在这个目录下鼠标右键，选择Git Bash Here，在打开的命令窗口下分别键入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//安装hexo基础框架<br>npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>自动安装完成后。输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><p>检查是否安装成功<br>如果到目前为止都没有问题的话，那么本地的配置就已经全部结束了。接下来我们需要在<strong>GitHub</strong>上新建项目</p><ul><li>在GitHub上创建并设置远程库<br>注册登录GitHub账号，关于无法访问GitHub的问题，<del>出门右转科学上网。</del><br>登录完成后，选择<strong>New repository，然后在Repository name下面填写你要创建的地址(注意仓库名一定要和用户名一致），这个地址是就是你的域名，以github.io结尾。</strong> 例如填写<code>codersunk.github.io</code>以后在地址栏直接输入<code>codersunk.github.io</code>就可以访问博客网站</li><li>初始化Hexo<br>在博客文件夹目录下，右键Git Bash here，键入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure>等待初始化完成</li><li>配置deployment<br>在博客项目的根目录有个_config.yml配置文件，修改里面的deploy配置，如下：<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">url:</span> https:<span class="hljs-comment">//name.github.io</span><br><br>...<br><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> git@github.com:name/name.github.io.git<br><span class="hljs-symbol">branch:</span> main<br></code></pre></td></tr></table></figure></li><li>安装git部署插件<br>在目录下右键Git Bash here，键入<code>npm install hexo-deployer-git --save</code></li><li>本地查看<br>键入<code>hexo g</code> 加载hexo基础html、css、js等文件。<br>接着键入<code>hexo s</code> 相当于开启了一个本地的服务器,在浏览器中输入 <a href="http://localhost:4000/">http://localhost:4000/</a> ,出现如下页面，说明本地hexo默认模板配置成功<br><img src="/img/hexo.jpg"></li><li>远程部署<br><code>hexo d</code>,部署成功后，即可在<a href="https://name.github.io/">https://name.github.io</a> 下访问你的博客</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
